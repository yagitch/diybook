= スマートホームを作る：応用編

ここからは、第2章で作った最小構成のシステムに様々な機能を盛り込んでいきます。追加のハードウェアが必要なものがありますので、それも合わせて説明します。

== シーリングライトと Hue を連動させる（IRKit を使う）

いくら Hue が便利でも、家の照明をすべて Hue にさせている人は珍しいと思います。Hue 単体では部屋が暗くなってしまうので、Hue と一緒に既存のシーリングライトを使用されている方が多いかもしれません。ただ、Hue とシーリングライトを別々に操作するのは煩雑で、何のために高価な電球を導入したのか分からなくなっちゃいますよね。そこで、Hue を点けたときはシーリングライトを消し、シーリングライトを点けたときは Hue を消すような連動制御をしたいと思います。イメージとしては、「アレクサ、ライトを100にして」でシーリングライトが付き、「アレクサ、ライトを50にして」でシーリングライトが消え、代わって Hue が付くような感じです。「アレクサ、ライトをオフにして」でどちらの照明が付いていようと消えます。

=== 用意するもの

 * IRKit@<br>{}（※本書では IRKit を説明に使用していますが、同様に API を持つ iRemocon でも同じことが可能です）
 * （オプション）シーリングライト用リモコンスイッチ（画像）

もしシーリングライトがリモコン対応していなければこのリモコンスイッチが使えます。我が家はリモコン対応していないため、この機器を間に挟んでリモコン制御可能にしています。ただ、スペーサーを入れないとシーリングライトの固定状態が不安定になりますので注意してください。

（画像：リモコンスイッチを噛ませた図と見取り図）

=== IRKit の接続確認

まず、既に動作している IRKit の IP アドレスを特定します。既に IRKit がネットワークに接続されていれば本体の LED が青く点っていると思います。IP アドレスはネットワークの環境によって決まった特定方法がないので、ルータの DHCP 機能を確認するとか、ping を打ちまくるとかで何とかして特定してあげてください。IRKit の公式ページ@<fn>{site}には Bonjour を使った解決方法が示されています。

//footnote[site][http://getirkit.com/]

次に、Raspberry Pi 上で curl コマンドを打ちます。ここでは、IP アドレスを「192.168.0.12」として説明します。

//cmd{
$ curl -i "http://192.168.0.12/messages" -H "X-Requested-With: curl"
HTTP/1.0 200 OK
Access-Control-Allow-Origin: *
Server: IRKit/3.0.0.0.g85190b1
Content-Type: text/plain

{"format":"raw","freq":38,"data":[17421,8755,1111,1111,1111,1111,1111,3228,1111,3228,1111,1111,1111,1111,1111,1111,1111,1111,1111,3228,1111,3228,1111,3228,1111,1111,1111,3228,1111,3228,1111,3228,1111,1111,1111,1111,1111,3228,1111,3228,1111,3228,1111,3228,1111,1111,1111,3228,1111,3228,1111,3228,1111,1111,1111,1111,1111,1111,1111,1111,1111,3228,1111,1111,1111,1111,1111,65535,0,13230,17421,4400,1073]}
//}

"HTTP/1.0 200 OK"が返ってくれば IRKit と Raspberry Pi との通信ができる状態になっています。一番下の数字が並んでいるのが最後に入力されたリモコン信号です。（場合によってはこの部分が出ないこともあります）

=== Alexa ブリッジの設定

Node-RED Alexa Home Skill Bridge の設定を編集します。「 Devices 」ページには既に第2章で追加した「ライト」の設定があると思いますので、これを利用します。第2章では ON と OFF の二段階でしたが、これを ON（シーリングライト）、ON（Hue最大輝度）、ON（Hue最小輝度）、OFF の四段階にします。そのために調光設定を使います。「Edit」を選択し、図のように Actions の2段目にある「%」のチェックを入れます。続いて「OK」で確定します。

//image[3-1-3-1][「ライト」の設定編集画面]

=== シェルスクリプトの作成

すべてのフローを Node-RED に記述すると煩雑になるので、手っ取り早くシェルスクリプトを使うことにします。ここでは2つの sh ファイルを用意します。メンテナンス性のために2つに分割していますが、1つで記述してもOKです。

//listnum[3-1-4-1][/home/hiro/auto/curl.sh][bash]{
#!/bin/bash

IRKIT_ADDRESS=192.168.0.12
HUE_ADDRESS=192.168.0.13

case $1 in

  light_on)
    curl -i "http://${IRKIT_ADDRESS}/messages" -H "X-Requested-With: curl" -d '{"format":"raw","freq":38,"data":[5049,5049,1622,1622,1622,1622,1622,1622,1622,3704,1679,3704,1679,3704,1679,3704,1679,1679,1679,65535,0,41171,5049,5049,1679,1679,1679,1679,1679,1679,1679,3704,1679,3704,1679,3704,1679,3704,1679,1679,1679]}'
    ;;

  light_off)
    curl -i "http://${IRKIT_ADDRESS}/messages" -H "X-Requested-With: curl" -d '{"format":"raw","freq":38,"data":[5049,5049,1622,1622,1622,1622,1622,3704,1622,1622,1622,3704,1622,3704,1622,1622,1622,3704,1622,65535,0,42612,5049,5049,1622,1622,1622,1622,1622,3704,1622,1622,1622,3704,1622,3704,1622,1622,1622,3704,1622,65535,0,42612,5049,5049,1622,1622,1622,1622,1622,3834,1622,1622,1622,3834,1622,3834,1622,1622,1622,3834,1622]}'
    ;;

  hue_1)
    curl -i "http://${HUE_ADDRESS}/api/newdeveloper/groups/0/action" -X PUT -d '{"on":true,"bri":1,"hue":13401,"sat":204}'
    ;;

  hue_2)
    curl -i "http://${HUE_ADDRESS}/api/newdeveloper/groups/0/action" -X PUT -d '{"on":true,"bri":254,"hue":13401,"sat":204}'
    ;;

  hue_off)
    curl -i "http://${HUE_ADDRESS}/api/newdeveloper/groups/0/action" -X PUT -d '{"on":false}'
    ;;
esac
//}

//listnum[3-1-4-2][/home/hiro/auto/macro.sh][bash]{
#!/bin/bash

AUTO_HOME=/home/hiro/auto

case $1 in

  light1)
    ${AUTO_HOME}/curl.sh hue_1
    ${AUTO_HOME}/curl.sh light_off
  ;;

  light2)
    ${AUTO_HOME}/curl.sh hue_2
    ${AUTO_HOME}/curl.sh light_off
  ;;

  light3)
    ${AUTO_HOME}/curl.sh light_on
    ${AUTO_HOME}/curl.sh hue_off
  ;;

  light_off)
    ${AUTO_HOME}/curl.sh light_off
    ${AUTO_HOME}/curl.sh hue_off
  ;;

esac
//}

Raspberry Pi 上にシェルスクリプトを作成したら、実行権限を付け、コマンドラインで実行してきちんと動作することを確認しておきます。

=== Node-RED の設定

Node-RED の画面は以下のように接続します。

//image[3-1-5-1][Node-RED 上で接続した画面]

中央にある「 light ～」という名前のノードは change ノードを使用しています。（名前を入力するとフロー図上の表示名がこのように差し替わります）。右端のノードは exec ノードです。

//image[3-1-5-2][switch ノードのプロパティ画面]

上から順番に評価していき、OFF なら1番目のフロー、1が指定されれば2番目のフロー、2～50が指定されれば3番目のフロー、それ以外は（つまり51～100が指定されれば）4番目のフローに進みます。単に ON が指定されたときは Alexa が状態情報をもっているので、最後に ON だったときの状態で ON にします。パーセンテージでの指定なので0～100以外の値を指定すると Alexa が「指定の範囲外です」などとエラーを返します。

//image[3-1-5-3][light_off ノードのプロパティ画面]

light1～3ノードは light_off ノードの設定に準じるので図は省略します。

//image[3-1-5-4][/home/hiro/auto/macro.sh ノードのプロパティ画面]

最後にデプロイします。

=== 動作試験

「ライト」ノードの Connected 表示を確認して、Alexa に話しかけます。初期状態はシーリングライトも Hue も消灯している状態としましょう。「アレクサ、ライトを100にして」でシーリングライトが点きます。「アレクサ、ライトを50にして」でシーリングライトが消え、Hue が点きます。「アレクサ、ライトを1にして」で Hue の光量が暗くなります。そして最後に「アレクサ、ライトをオフにして」で Hue が消えます。試しにいろんな順番で命令を実行してみましょう。シーリングライトと Hue が同時に点灯することがないことや、OFF にした時に片方だけ点灯しているようなことがないことが確認できたら成功です。

== 照明の切り替えをスケジュールする

突然ですが、夜更かしをせずに毎日同じ時間に寝ることは重要です。スマートフォンの Hue アプリでは毎日指定した時間に少しずつ明かりを暗くしていき、最後には消灯するという素敵な機能があります。しかし暗くしていくスパンを最大一時間でしか設定できない、Hue でしか使えないなど、少し不便です。これをシーリングライトとも連動させて、さらに任意の時間にシーリングライトから Hue へ切り替えられるようにしたいと思います。

といっても cron でシェルスクリプトを動かすだけです。これで21時になるとシーリングライトが消え、Hue に切り替わります。

//listnum[3-2-1][crontab][bash]{
# m h  dom mon dow   command
 0 21  *  *  * /home/hiro/auto/macro.sh light2
//}

Hue アプリのフェードアウト機能と組み合わせるとこのような感じになります。

（画像：アプリと組み合わせた点灯状態のスケジュール図）

== 「バルス」で Raspberry Pi の電源を落とす（スピーカーとの接続）（削除）

Raspberry Pi を設定していくにあたって、ある程度セットアップが終了して主にハードウェアを触って試行錯誤するようになると、コンソールを開かずに電源オフ（または再起動）したくなると思います。まあ電源ケーブルを抜き差しすれば電源オフ（または再起動）できるのですが、コマンドで安全にシステムを終了させた方が安心ですね。このようにメンテナンスで何度となく電源オフや再起動をさせる機会があるのなら、はじめから電源オフ機能を付けておくのが良いでしょう。

3.1では curl コマンドを用いて IRKit の API を操作しましたが、この curl コマンドを shutdown コマンドに差し替えればやりたいことができます。ただ、Raspberry Pi の電源がオフになったかどうかはやや分かりにくいところがあるので、本当に命令が効いているのか、何らかのリアクションが欲しいですよね。というわけでついでにスピーカーにも接続して、電源オフの命令を受信後にまずリアクション音を鳴らしてからシャットダウン処理に入るようにしましょう。音声コマンドは「バルス」とします。

=== 用意するもの

 * アクティブスピーカー（フォンジャック端子の付いているもの）

=== スピーカーとの物理接続

フォンケーブルで Raspberry Pi とアクティブスピーカーを接続します。

続いて、標準で入っている WAV ファイルを再生してみます。

sudo aplay /usr/share/sounds/alsa/Front_Center.wav

英語で「Front...Center...」という声が聞こえたら OK です。

=== シェルスクリプトの編集

3.1.4 で登場した macro.sh の switch 文に以下の条件を追加します。

//listnum[3-3-3-1][/home/hiro/auto/macro.sh][bash]{
  shutdown)
    aplay ${AUTO_HOME}/sound/nc32799.wav
    shutdown -h now
    ;;
//}

・aplay コマンドが効くかの確認
・Node-RED の操作

これを応用すれば、Amazon Alexa に呼びかけるだけで Raspberry Pi 上で任意のコマンドを実行できるようになります。shutdown の他に reboot を増やすも良し、curl コマンドを駆使して外部の API を叩きに行くも良し、様々に応用が利きます。

=== おまけ：Bluetooth スピーカーと接続する

スピーカーと接続したはいいのですが、Raspberry Pi のアナログ音声出力は結構ノイズがひどいです。また、有線接続であることで Raspberry Pi とスピーカーの配置場所に制限ができるのもよくないですね。ここはちょっとお金を出して Bluetooth スピーカーを購入し、Raspberry Pi と無線接続してみましょう。

・Bluetooth スピーカーとの接続
・音声のテスト再生
・4.3のコマンド差し替え、再生確認

== 外出時に電気を消す（外出中フラグを立てる）

3.2では毎日決まった時間にシーリングライトから Hue へと照明を切り替えるようにしました。しかし毎日この時間に人がいるとは限りません。もし外出中にこれが動いてしまうと、消えていたはずの照明を付けることになり、とてもスマートとは言えません。

ですので在宅管理システムを作ることにします。在宅管理システムといっても簡単なものです。トリガーを引くと特定のディレクトリに0バイトファイルを作成するというスクリプトを作成します。もう一度トリガーを引くとその0バイトファイルを削除します。これを帰宅時と外出時にトリガーすることにより、ファイルが存在する時にだけシステムは在宅中と見なしてスケジュール実行するという仕組みが完成します。外出中の場合は何もしません。

・Amazon Alexa と Node-RED の接続
・シェルスクリプトを作成する
・リアクション音をつける

== 帰宅時に電気を付ける（Bluetooth ポーリング）

3.4では外出中フラグを管理することで在宅か不在かをシステムに認識させるようにしました。このトリガーは外出時も帰宅時も手動で行う必要がありますが、自動で検知してくれると素敵ですよね。

この節では手始めに、帰宅を自動検知する仕組みを作ってみることにします。ここで利用するのはスマートフォンです。スマートフォンを私は常に持ち歩いているので、システムが不在の時には常に Raspberry Pi から Bluetooth ポーリングさせて、もし応答したら帰宅と見なす仕組みを作ります。気をつけなくてはいけないのは、システムが不在になった時にいきなりポーリングを開始してしまうと、まだ外出前でモタモタしているうちにシステムは帰宅したと見なしてしまうため、外出後しばらく（＝家から十分に離れるまで）はポーリングを開始しないという時限式の仕組みにする必要があるというところです。

・Bluetooth ポーリングできるかテスト
・シェルスクリプトを作成する

これで帰宅時の自動検知ができるようになりました。外出時も同様に自動検知したいのですが、我が家では以下の理由から外出時は手動でトリガーを引く方が確実であると結論づけています。（個人的な事情です）

 * 外出時に照明・エアコンが確実にオフになっていることを目視で確認したい@<br>{}（不在の状態で誤作動することを避け、常に安全側に倒したい）
 * メンテナンスなどの理由でスマートフォンの Bluetooth をオフにすることがあるので、その場合は不在と認識して欲しくない
 * 我が家の場合、外出後30分はポーリングしない設定になっているため、30分以内に帰宅が見込まれる時は外出をトリガーしない等の柔軟な運用をしたい

ですので、完全自動化は皆さんの知恵にお任せすることにします。

== リモコンでトリガーを引く（LIRC を使う）

第3章からここまで、トリガーはすべて Amazon Alexa を利用してきました。しかし Amazon Alexa に話しかけるよりリモコンの方が動作が速いこともあります。そもそも機械に話しかけるのが気恥ずかしい方もいると思います。
この節では赤外線リモコンの受信機を Raspberry Pi に接続し、Amazon Alexa でトリガーしているものをすべて赤外線リモコンでできるようにしたいと思います。

用意するもの


・赤外線受信機の接続
・LIRC の導入
・動作試験

参考：https://yagi.tc/archives/2017/03/28/raspberry-pi-2-ir-reciever/

== NFCでトリガーを引く（hogehoge.py）

この調子でトリガーできる手段をさらに増やしていこうと思います。赤外線リモコンでの操作は便利ですが、もしかしたら動かないときがあるかもしれません。その時のために NFC リーダーと NFC タグを使って、タッチで命令を伝えるという手段を加えてみましょう。

・NFC リーダーの接続
・hcitool.py の導入
・動作試験

== IFTTT でトリガーを引く

トリガーを引くシリーズ、最後は外部から操作可能にするために IFTTT を使う方法です。

== 複数家電のマクロリモコンをつくる（外部シェルへの切り出し・IRKit を使う）

IRKit の API を使ったリモコンの制御
仮想的に TV を実現する
エアコンとサーキュレータを同時にオンオフする

== Amazon Alexa の代わりにミクさんにおしゃべりさせる（OpenJTalk を使う）

OpenJTalk の導入

== 音声を使わずに Amazon Alexa を操作する（OpenJTalk の応用）

スケジュール機能のない Amazon Alexa を OpenJTalk を使って操作する

== もっと流暢に喋らせる（フリー音源の活用）

フリー音源サイトを紹介するだけ
例も少し入れる

== 定時に外気温・室温・湿度を声でお知らせする（netatmo のデータ取得）

OpenJTalk の応用編。高いけど netatmo を使う。天気予報サイトを使っても可

== 日の出・日の入りに鐘の音を鳴らす（day-night.sh）

カーテンの開け閉めタイミングを音でお知らせ。応用するとカーテン開け閉め含めて自動化できる

== 夜7時になると NHK ニュースを流す（ストリーミング再生）

お気に入りのラジオ番組を自動的に流して終了させる仕組み

== リモコンのボタン1つで特定のインターネットラジオを再生する・終了する（ストリーミング再生・応用編）

HUIS の紹介。自由にボタンを配置できるメリット
