= スマートホームを作る：応用編

ここからは、第2章で作った最小構成のシステムに様々な機能を盛り込んでいきます。追加のハードウェアが必要なものがありますので、それも合わせて説明します。

== シーリングライトとHueを連動させる（IRKitを使う）

いくらHueが便利でも、家の照明をすべてHueにさせている人は珍しいと思います。Hue単体では部屋が暗くなってしまうので、Hueと一緒に既存のシーリングライトを使用されている方が多いかもしれません。ただ、Hueとシーリングライトを別々に操作するのは煩雑で、何のために高価な電球を導入したのか分からなくなっちゃいますよね。そこで、Hueを点けたときはシーリングライトを消し、シーリングライトを点けたときはHueを消すような連動制御をしたいと思います。

=== 用意するもの

 * IRKit@<br>{}（※本書ではIRKitを説明に使用していますが、同様にAPIを持つiRemoconでも同じことが可能です）
 * （オプション）シーリングライト用リモコンスイッチ（画像）

もしシーリングライトがリモコン対応していなければこのリモコンスイッチが使えます。我が家はぶら下げヒモ式のシーリングライトでリモコン対応していないため、この機器を間に挟んでリモコン制御可能にしています。ただ、スペーサーを入れないとシーリングライトの固定状態が不安定になりますので注意してください。

（画像：リモコンスイッチを噛ませた図と見取り図）

・IRKitのセットアップ
・IPアドレスとAPIの動作確認
・Alexaブリッジの設定
・Node-REDの設定
・動作試験

== 照明の切り替えをスケジュールする

突然ですが、夜更かしをせずに毎日同じ時間に寝ることは重要です。スマートフォンのHueアプリでは毎日指定した時間に少しずつ明かりを暗くしていき、最後には消灯するという素敵な機能があります。しかし暗くしていくスパンを最大一時間でしか設定できない、Hueでしか使えないなど、少し不便です。これをシーリングライトとも連動させて、さらに任意の時間にシーリングライトからHueへ切り替えられるようにしたいと思います。

・Node-REDの設定
・別解：cronによる設定

Hueアプリのフェードアウト機能と組み合わせるとこのような感じになります。

（画像：アプリと組み合わせた点灯状態のスケジュール図）

== 「バルス」でRaspberry Piの電源を落とす（スピーカーとの接続）

Raspberry Piを設定していくにあたって、ある程度セットアップが終了して主にハードウェアを触って試行錯誤するようになると、コンソールを開かずに電源オフ（または再起動）したくなると思います。まあ電源ケーブルを抜き差しすれば電源オフ（または再起動）できるのですが、コマンドで安全にシステムを終了させた方が安心ですね。このようにメンテナンスで何度となく電源オフや再起動をさせる機会があるのなら、はじめから電源オフ機能を付けておくのが良いでしょう。

3.1ではcurlコマンドを用いてIRKitのAPIを操作しましたが、このcurlコマンドをshutdownコマンドに差し替えればやりたいことができます。ただ、Raspberry Piの電源がオフになったかどうかはやや分かりにくいところがあるので、本当に命令が効いているのか、何らかのリアクションが欲しいですよね。というわけでついでにスピーカーにも接続して、電源オフの命令を受信後にまずリアクション音を鳴らしてからシャットダウン処理に入るようにしましょう。音声コマンドは「バルス」とします。

・スピーカーとの物理接続
・aplayコマンドが効くかの確認
・Node-REDの操作

これを応用すれば、Amazon Alexaに呼びかけるだけでRaspberry Pi上で任意のコマンドを実行できるようになります。shutdownの他にrebootを増やすも良し、curlコマンドを駆使して外部のAPIを叩きに行くも良し、様々に応用が利きます。

=== おまけ：Bluetoothスピーカーと接続する

スピーカーと接続したはいいのですが、Raspberry Piのアナログ音声出力は結構ノイズがひどいです。また、有線接続であることでRaspberry Piとスピーカーの配置場所に制限ができるのもよくないですね。ここはちょっとお金を出してBluetoothスピーカーを購入し、Raspberry Piと無線接続してみましょう。

・Bluetoothスピーカーとの接続
・音声のテスト再生
・4.3のコマンド差し替え、再生確認

== 外出時に電気を消す（外出中フラグを立てる）

3.2では毎日決まった時間にシーリングライトからHueへと照明を切り替えるようにしました。しかし毎日この時間に人がいるとは限りません。外出中にこれを動かすと、消えていたはずの照明を付けることになり、とてもスマートとは言えません。
ですので在宅管理システムを作ることにします。在宅管理システムといっても簡単なものです。トリガーを引くと特定のディレクトリに0バイトファイルを作成するというスクリプトを作成します。もう一度トリガーを引くとその0バイトファイルを削除します。これを帰宅時と外出時にトリガーすることにより、ファイルが存在する時にだけシステムは在宅中と見なしてスケジュール実行するという仕組みが完成します。外出中の場合は何もしません。

・AlexaとNode-REDの接続
・シェルスクリプトを作成する
・リアクション音をつける

== 帰宅時に電気を付ける（Bluetoothポーリング機能）

3.4では外出中フラグを管理することで在宅か不在かをシステムに認識させるようにしました。このトリガーは外出時も帰宅時も手動で行う必要がありますが、自動で検知してくれると素敵ですよね。

この節では手始めに、帰宅を自動検知する仕組みを作ってみることにします。ここで利用するのはスマートフォンです。スマートフォンを私は常に持ち歩いているので、システムが不在の時には常にRaspberry PiからBluetoothポーリングさせて、もし応答したら帰宅と見なす仕組みを作ります。気をつけなくてはいけないのは、システムが不在になった時にいきなりポーリングを開始してしまうと、まだ外出前でモタモタしているうちにシステムは帰宅したと見なしてしまうため、外出後しばらく（＝家から十分に離れるまで）はポーリングを開始しないという時限式の仕組みにする必要があるというところです。

・Bluetoothポーリングできるかテスト
・シェルスクリプトを作成する

これで帰宅時の自動検知ができるようになりました。外出時も同様に自動検知したいのですが、我が家では以下の理由から外出時は手動でトリガーを引く方が確実であると結論づけています。（個人的な事情です）

 * 外出時に照明・エアコンが確実にオフになっていることを目視で確認したい@<br>{}（不在の状態で誤作動することを避け、常に安全側に倒したい）
 * メンテナンスなどの理由でスマートフォンのBluetoothをオフにすることがあるので、その場合は不在と認識して欲しくない
 * 我が家の場合、外出後30分はポーリングしない設定になっているため、30分以内に帰宅が見込まれる時は外出をトリガーしない等の柔軟な運用をしたい

ですので、完全自動化は皆さんの知恵にお任せすることにします。

== リモコンでトリガーを引く（LIRCの使い方）

第3章からここまで、トリガーはすべてAmazon Alexaを利用してきました。しかしAlexaに話しかけるよりリモコンの方が動作が速いこともあります。そもそもAlexaに話しかけるのが気恥ずかしい方もいると思います。
この節では赤外線リモコンの受信機をRaspberry Piに接続し、Amazon Alexaでトリガーしているものをすべて赤外線リモコンでできるようにしたいと思います。

用意するもの


・赤外線受信機の接続
・LIRCの導入
・動作試験

参考：https://yagi.tc/archives/2017/03/28/raspberry-pi-2-ir-reciever/

== NFCでトリガーを引く（hogehoge.py）

この調子でトリガーできる手段をさらに増やしていこうと思います。赤外線リモコンでの操作は便利ですが、もしかしたら動かないときがあるかもしれません。その時のためにNFCリーダーとNFCタグを使って、タッチで命令を伝えるという手段を加えてみましょう。

・NFCリーダーの接続
・hogehoge.pyの導入
・動作試験

== IFTTTでトリガーを引く

トリガーを引くシリーズ、最後は外部から操作可能にするためにIFTTTを使う方法です。

== 複数家電のマクロリモコンをつくる（外部シェルへの切り出し・IRKitを使う）

IRKitのAPIを使ったリモコンの制御
仮想的にTVを実現する
エアコンとサーキュレータを同時にオンオフする

== Alexaの代わりにミクさんにおしゃべりさせる（OpenJTalkを使う）

OpenJTalkの導入

== 音声を使わずにAlexaを操作する（OpenJTalkの応用）

スケジュール機能のないAlexaをOpenJTalkを使って操作する

== もっと流暢に喋らせる（フリー音源の活用）

フリー音源サイトを紹介するだけ
例も少し入れる

== 定時に外気温・室温・湿度を声でお知らせする（netatmoのデータ取得）

OpenJTalkの応用編。高いけどnetatmoを使う。天気予報サイトを使っても可

== 日の出・日の入りに鐘の音を鳴らす（day-night.sh）

カーテンの開け閉めタイミングを音でお知らせ。応用するとカーテン開け閉め含めて自動化できる

== 夜7時になるとNHKニュースを流す（cvlcによるストリーミング再生）

お気に入りのラジオ番組を自動的に流して終了させる仕組み

== リモコンのボタン1つで特定のインターネットラジオを再生する・終了する（cvlcによるストリーミング再生・応用編）

HUISの紹介。自由にボタンを配置できるメリット
